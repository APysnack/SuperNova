{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\TopShip.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport './Game.css'; // Top Ship component\n\nfunction TopShip(props) {\n  _s();\n\n  const speed = 150; // Ship build for the initial state (top left)\n\n  const shipBuild = [[0, 2], [8, 2], [0, 4], [2, 4], [4, 4], [6, 4], [8, 4], [2, 6], [4, 6], [6, 6], // head is index 10\n  [4, 8]]; // Ship build for the top right position \n\n  const shipBuildRight = [[90, 2], [98, 2], [90, 4], [92, 4], [94, 4], [96, 4], [98, 4], [92, 6], [94, 6], [96, 6], // head is index 10\n  [94, 8]]; // component state variables\n\n  const [shipLoc, setShipLoc] = useState(shipBuild);\n  const [shipDirection, setDirection] = useState(props.currDirection);\n  const [active, setActive] = useState(true);\n  const [stuckLocation, setStuckLoc] = useState('INIT'); // Waits for user to select a direction and sets ship movement in that direction\n\n  useEffect(() => {\n    setNewDirection(); // moves the ship at an interval defined by the speed\n\n    const interval = setInterval(() => {\n      moveShip();\n    }, speed);\n    return () => clearInterval(interval);\n  }, [shipLoc, active]); // checks to ensure the ship stays inside the game play area\n\n  const checkBounds = () => {\n    if (shipLoc[0][0] <= 6) {\n      setActive(false);\n      setStuckLoc('LEFT');\n      setDirection('STUCKLEFT');\n    } else if (shipLoc[1][0] >= 92) {\n      setActive(false);\n      setStuckLoc('RIGHT');\n      setDirection('STUCKRIGHT');\n    } else {\n      setActive(true);\n      setStuckLoc('INIT');\n    }\n  }; // Gets the location of the top ship's head and passes to the parent component\n\n\n  const changeTopShipLoc = currTopShipLoc => {\n    props.changeTopShipLoc(currTopShipLoc);\n  }; // Sets the ship in a new direction\n\n\n  const setNewDirection = () => {\n    if (active) {\n      setDirection(props.currDirection);\n    } else if (props.currDirection !== stuckLocation) {\n      setActive(true);\n    }\n  }; // changes the location coordinates of the ship to the right\n\n\n  const shiftRight = ([x, y]) => {\n    return [x + 2, y];\n  }; // changes the location coordinates of the ship to the left\n\n\n  const shiftLeft = ([x, y]) => {\n    return [x - 2, y];\n  }; // waits for user input and moves the ship in the designated direction\n\n\n  const moveShip = () => {\n    let location;\n\n    switch (shipDirection) {\n      case 'RIGHT':\n        location = shipLoc.map(shiftRight);\n        break;\n\n      case 'LEFT':\n        location = shipLoc.map(shiftLeft);\n        break;\n\n      case 'STUCKLEFT':\n        location = shipBuild;\n        break;\n\n      case 'STUCKRIGHT':\n        location = shipBuildRight;\n        break;\n    } // sets the ship location to the new coordinates\n\n\n    setShipLoc(location); // updates location of the ship's head forparent component (who passes info to missile)\n\n    changeTopShipLoc(shipLoc); // ensures the ship is in the bounds of the game area\n\n    checkBounds();\n  }; // returns the ship build to the parent component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: shipLoc.map((dot, i) => {\n      const style = {\n        left: `${dot[0]}%`,\n        top: `${dot[1]}%`\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pixel\",\n        style: style\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TopShip, \"ujWRpxJklYmegohOhPsKhWKz1dI=\");\n\n_c = TopShip;\nexport default TopShip;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopShip\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/TopShip.js"],"names":["React","useState","useEffect","TopShip","props","speed","shipBuild","shipBuildRight","shipLoc","setShipLoc","shipDirection","setDirection","currDirection","active","setActive","stuckLocation","setStuckLoc","setNewDirection","interval","setInterval","moveShip","clearInterval","checkBounds","changeTopShipLoc","currTopShipLoc","shiftRight","x","y","shiftLeft","location","map","dot","i","style","left","top"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nimport './Game.css';\r\n\r\n// Top Ship component\r\nfunction TopShip(props){\r\n\r\n    const speed = 150;\r\n\r\n    // Ship build for the initial state (top left)\r\n    const shipBuild = [ [0,2], [8,2],\r\n    [0,4], [2,4], [4,4], [6,4], [8,4],\r\n    [2,6], [4,6], [6,6],\r\n    // head is index 10\r\n    [4,8]]\r\n\r\n    // Ship build for the top right position \r\n    const shipBuildRight = [ [90,2], [98,2],\r\n    [90,4], [92,4], [94,4], [96,4], [98,4],\r\n    [92,6], [94,6], [96,6],\r\n    // head is index 10\r\n    [94,8]]\r\n\r\n    // component state variables\r\n    const [shipLoc, setShipLoc] = useState(shipBuild);\r\n    const [shipDirection, setDirection] = useState(props.currDirection);\r\n    const [active, setActive] = useState(true);\r\n    const [stuckLocation, setStuckLoc] = useState('INIT');\r\n\r\n    // Waits for user to select a direction and sets ship movement in that direction\r\n    useEffect(() => {\r\n        setNewDirection();\r\n\r\n        // moves the ship at an interval defined by the speed\r\n        const interval = setInterval(() => {\r\n            moveShip();\r\n        }, speed);\r\n        return () => clearInterval(interval);\r\n\r\n    },[shipLoc, active]);\r\n\r\n    // checks to ensure the ship stays inside the game play area\r\n    const checkBounds = () => {\r\n        if (shipLoc[0][0] <= 6) {\r\n            setActive(false);    \r\n            setStuckLoc('LEFT');\r\n            setDirection('STUCKLEFT');\r\n        }\r\n        else if(shipLoc[1][0] >= 92){\r\n            setActive(false);    \r\n            setStuckLoc('RIGHT');\r\n            setDirection('STUCKRIGHT');\r\n        }\r\n        else{\r\n            setActive(true);\r\n            setStuckLoc('INIT');\r\n        }\r\n    }\r\n\r\n    // Gets the location of the top ship's head and passes to the parent component\r\n    const changeTopShipLoc = (currTopShipLoc) => {\r\n        props.changeTopShipLoc(currTopShipLoc);\r\n    }\r\n\r\n    // Sets the ship in a new direction\r\n    const setNewDirection = () => {\r\n        if (active) {\r\n            setDirection(props.currDirection);\r\n        }\r\n        else if (props.currDirection !== stuckLocation){\r\n            setActive(true);\r\n        }\r\n    }\r\n\r\n    // changes the location coordinates of the ship to the right\r\n    const shiftRight = ([x,y]) => {\r\n        return([x+2, y]);\r\n    }\r\n\r\n    // changes the location coordinates of the ship to the left\r\n    const shiftLeft = ([x,y]) => {\r\n        return([x-2, y]);\r\n    }\r\n\r\n    // waits for user input and moves the ship in the designated direction\r\n    const moveShip = () => {\r\n        let location;\r\n\r\n        switch (shipDirection){\r\n            case 'RIGHT':\r\n                location = shipLoc.map(shiftRight)\r\n                break;\r\n            case 'LEFT':\r\n                location = shipLoc.map(shiftLeft)\r\n                break;\r\n            case 'STUCKLEFT':\r\n                location = shipBuild;\r\n                break;\r\n            case 'STUCKRIGHT':\r\n                location = shipBuildRight;\r\n                break;\r\n        }\r\n        \r\n        // sets the ship location to the new coordinates\r\n        setShipLoc(location);\r\n\r\n        // updates location of the ship's head forparent component (who passes info to missile)\r\n        changeTopShipLoc(shipLoc);\r\n\r\n        // ensures the ship is in the bounds of the game area\r\n        checkBounds();\r\n    }\r\n\r\n\r\n    // returns the ship build to the parent component\r\n    return(\r\n    <div>\r\n        {shipLoc.map((dot, i)=>{\r\n            const style = {\r\n                left: `${dot[0]}%`,\r\n                top: `${dot[1]}%`\r\n            }\r\n\r\n            return(\r\n                <div className=\"pixel\" key={i} style={style}></div>\r\n            )\r\n        })}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default TopShip;"]},"metadata":{},"sourceType":"module"}