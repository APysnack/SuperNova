{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport GameBoard from './GameBoard';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Game.css';\nvar socket;\n\nfunction Game({\n  location\n}) {\n  _s();\n\n  const [topLives, setTopLives] = useState(3);\n  const [botLives, setBotLives] = useState(3);\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  const hStyle = {\n    margin: '20px auto',\n    position: 'relative',\n    textAlign: 'center',\n    fontSize: 'x-large'\n  }; // parses name/room from url and sends data to server socket\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); // calls the join function on server side, passing name & room\n\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const updateLives = (topNum, botNum) => {\n    setTopLives(topNum);\n    setBotLives(botNum);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: hStyle,\n      children: [\"P1: Lives Left: \", topLives]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      updateLives: updateLives\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: hStyle,\n      children: [\"P2: Lives Left: \", botLives]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"TGeKbqMQaT60RT2RuCBrvL5Sw6Y=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/Game.js"],"names":["React","useEffect","useState","GameBoard","queryString","io","socket","Game","location","topLives","setTopLives","botLives","setBotLives","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","hStyle","margin","position","textAlign","fontSize","parse","search","emit","error","alert","on","updateLives","topNum","botNum"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,YAAP;AAEA,IAAIC,MAAJ;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA2B;AAAA;;AAEvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMmB,QAAQ,GAAG,gBAAjB;AAEA,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,WADG;AAEXC,IAAAA,QAAQ,EAAE,UAFC;AAGXC,IAAAA,SAAS,EAAE,QAHA;AAIXC,IAAAA,QAAQ,EAAE;AAJC,GAAf,CAVuB,CAiBvB;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEY,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBX,WAAW,CAACuB,KAAZ,CAAkBnB,QAAQ,CAACoB,MAA3B,CAAvB;AAEAtB,IAAAA,MAAM,GAAGD,EAAE,CAACgB,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CANY,CAQZ;;AACAT,IAAAA,MAAM,CAACuB,IAAP,CAAY,MAAZ,EAAoB;AAAEhB,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAqCe,KAAD,IAAW;AAC3C,UAAGA,KAAH,EAAU;AACRC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACJ,KAJD;AAMH,GAfQ,EAeN,CAACT,QAAD,EAAWb,QAAQ,CAACoB,MAApB,CAfM,CAAT;AAiBA3B,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAAC0B,EAAP,CAAU,SAAV,EAAsBf,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;;AAOA,QAAMc,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AACpCzB,IAAAA,WAAW,CAACwB,MAAD,CAAX;AACAtB,IAAAA,WAAW,CAACuB,MAAD,CAAX;AACH,GAHD;;AAKA,sBACI;AAAA,4BACI;AAAI,MAAA,KAAK,EAAEb,MAAX;AAAA,qCAAoCb,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,WAAW,EAAEwB;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAI,MAAA,KAAK,EAAEX,MAAX;AAAA,qCAAoCX,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAtDQJ,I;;KAAAA,I;AAwDT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport GameBoard from './GameBoard'\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client'\r\n\r\nimport './Game.css';\r\n\r\nvar socket;\r\n\r\nfunction Game({ location }){\r\n\r\n    const [topLives, setTopLives] = useState(3);\r\n    const [botLives, setBotLives] = useState(3);\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const ENDPOINT = 'localhost:5000'\r\n\r\n    const hStyle = {\r\n        margin: '20px auto',\r\n        position: 'relative',\r\n        textAlign: 'center',\r\n        fontSize: 'x-large'\r\n    };\r\n\r\n    // parses name/room from url and sends data to server socket\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search)\r\n\r\n        socket = io(ENDPOINT);\r\n\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        // calls the join function on server side, passing name & room\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if(error) {\r\n              alert(error);\r\n            }\r\n        });\r\n\r\n    }, [ENDPOINT, location.search]);\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (message) => {\r\n            setMessages([...messages, message]);\r\n        })\r\n    }, [messages]);\r\n\r\n\r\n    const updateLives = (topNum, botNum) => {\r\n        setTopLives(topNum);\r\n        setBotLives(botNum);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1 style={hStyle}>P1: Lives Left: {topLives}</h1>\r\n            <GameBoard updateLives={updateLives}/>\r\n            <h1 style={hStyle}>P2: Lives Left: {botLives}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}