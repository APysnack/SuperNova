{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport GameBoard from './GameBoard';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Game.css';\nimport Input from './Input/Input';\nvar socket;\n\nfunction Game({\n  location\n}) {\n  _s();\n\n  const [topLives, setTopLives] = useState(3);\n  const [botLives, setBotLives] = useState(3);\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000'; // style for the header (lives tracker)\n\n  const hStyle = {\n    margin: '20px auto',\n    position: 'relative',\n    textAlign: 'center',\n    fontSize: 'x-large'\n  }; // parses name/room from url and sends data to server socket\n\n  useEffect(() => {\n    // parses name/room for the url\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // creates a client socket\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); // calls the join function on server side, passing name & room\n\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]); // when the user hits enter, triggers sendMessage, which triggers \n  // this use effect to add the message to the array of messages\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]); // triggered by enter key, sends the message to the back end which returns to the room\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  const updateLives = (topNum, botNum) => {\n    setTopLives(topNum);\n    setBotLives(botNum);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: hStyle,\n        children: [\"P1: Lives Left: \", topLives]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        updateLives: updateLives,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: hStyle,\n        children: [\"P2: Lives Left: \", botLives]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"TGeKbqMQaT60RT2RuCBrvL5Sw6Y=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/Game.js"],"names":["React","useEffect","useState","GameBoard","queryString","io","Input","socket","Game","location","topLives","setTopLives","botLives","setBotLives","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","hStyle","margin","position","textAlign","fontSize","parse","search","emit","error","alert","on","sendMessage","event","preventDefault","updateLives","topNum","botNum"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport GameBoard from './GameBoard'\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client'\r\n\r\nimport './Game.css';\r\nimport Input from './Input/Input'\r\n\r\nvar socket;\r\n\r\nfunction Game({ location }){\r\n\r\n    const [topLives, setTopLives] = useState(3);\r\n    const [botLives, setBotLives] = useState(3);\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const ENDPOINT = 'localhost:5000'\r\n\r\n    // style for the header (lives tracker)\r\n    const hStyle = {\r\n        margin: '20px auto',\r\n        position: 'relative',\r\n        textAlign: 'center',\r\n        fontSize: 'x-large'\r\n    };\r\n\r\n    // parses name/room from url and sends data to server socket\r\n    useEffect(() => {\r\n        // parses name/room for the url\r\n        const { name, room } = queryString.parse(location.search)\r\n\r\n        // creates a client socket\r\n        socket = io(ENDPOINT);\r\n\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        // calls the join function on server side, passing name & room\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if(error) {\r\n              alert(error);\r\n            }\r\n        });\r\n\r\n    }, [ENDPOINT, location.search]);\r\n\r\n    // when the user hits enter, triggers sendMessage, which triggers \r\n    // this use effect to add the message to the array of messages\r\n    useEffect(() => {\r\n        socket.on('message', (message) => {\r\n            setMessages([...messages, message]);\r\n        })\r\n    }, [messages]);\r\n\r\n    // triggered by enter key, sends the message to the back end which returns to the room\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(message){\r\n            socket.emit('sendMessage', message, () => setMessage(''));\r\n        }\r\n    }\r\n    const updateLives = (topNum, botNum) => {\r\n        setTopLives(topNum);\r\n        setBotLives(botNum);\r\n    }\r\n\r\n    return(\r\n        <div className=\"outerContainer\">\r\n            <div className=\"container\">\r\n                <h1 style={hStyle}>P1: Lives Left: {topLives}</h1>\r\n                <GameBoard updateLives={updateLives} socket={socket}/>\r\n                <h1 style={hStyle}>P2: Lives Left: {botLives}</h1>\r\n            </div>\r\n            <div>\r\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}