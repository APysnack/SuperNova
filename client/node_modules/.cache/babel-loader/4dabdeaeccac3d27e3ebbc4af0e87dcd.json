{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TopShip from './TopShip';\nimport BottomShip from './BottomShip';\nimport useKey from './UseKey';\nimport TopMissile from './TopMissile';\nimport BotMissile from './BotMissile';\nimport './Game.css';\nimport { Socket } from 'socket.io-client';\n\nfunction GameBoard(props) {\n  _s();\n\n  // returns true if the user is pressing a key (left arrow, right arrow, \"f\", etc.)\n  const rightPressed = useKey(\"ArrowRight\");\n  const leftPressed = useKey(\"ArrowLeft\");\n  const firePressed = useKey(\"f\"); // this can be changed, but the bottom ship is mapped to different keys than the top ship for now so they can both be operated with 1 keyboard\n\n  const pPressed = useKey(\"p\");\n  const iPressed = useKey(\"i\");\n  const oPressed = useKey(\"o\"); // state changes for the top ship/missile\n\n  const [topDirection, setTopDirection] = useState('RIGHT');\n  const [topMissileFire, setTopMissileFire] = useState(false);\n  const [topShipLoc, setTopShipLoc] = useState([0, 0]);\n  const [topLives, setTopLives] = useState(3); // state changes for the bottom ship/missile\n\n  const [bottomDirection, setBottomDirection] = useState('LEFT');\n  const [botMissileFire, setBotMissileFire] = useState(false);\n  const [botShipLoc, setBotShipLoc] = useState([0, 0]);\n  const [botLives, setBotLives] = useState(3); // when the user presses a key, checks the key they pressed and performs actions\n\n  useEffect(() => {\n    checkPressTop();\n    checkPressBot();\n    updateLives();\n  }, [rightPressed, leftPressed, firePressed, pPressed, iPressed, oPressed, topLives, botLives]); // initiates triggers for firing or movement\n\n  const checkPressTop = () => {\n    if (rightPressed) {\n      setTopDirection('RIGHT');\n    } else if (leftPressed) {\n      setTopDirection('LEFT');\n    }\n\n    if (firePressed) {\n      setTopMissileFire(true);\n    }\n  }; // sets the top missile fire to false and ends the trigger\n\n\n  const topFinishFire = () => {\n    setTopMissileFire(false);\n  }; // gets the location of the top ship's head for missile positioning\n\n\n  const changeTopShipLoc = currTopShipLoc => {\n    setTopShipLoc(currTopShipLoc);\n  };\n\n  const topShipHit = () => {\n    setTopLives(prevTopLives => prevTopLives - 1);\n  };\n\n  const botShipHit = () => {\n    setBotLives(prevBotLives => prevBotLives - 1);\n  }; // initiates triggers for firing or movement\n\n\n  const checkPressBot = () => {\n    if (pPressed) {\n      setBottomDirection('RIGHT');\n    } else if (iPressed) {\n      setBottomDirection('LEFT');\n    }\n\n    if (oPressed) {\n      setBotMissileFire(true);\n    }\n  }; // sets the bottom missile fire to false and ends the trigger\n\n\n  const botFinishFire = () => {\n    setBotMissileFire(false);\n  };\n\n  const updateLives = (topNum, botNum) => {\n    props.updateLives(topLives, botLives);\n  }; // gets the location of the bottom ship's head for missile positioning\n\n\n  const changeBotShipLoc = currBotShipLoc => {\n    setBotShipLoc(currBotShipLoc);\n  }; // returns the game area to the calling component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-area\",\n    children: [/*#__PURE__*/_jsxDEV(BottomShip, {\n      currDirection: bottomDirection,\n      changeBotShipLoc: changeBotShipLoc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(BotMissile, {\n      botMissileFire: botMissileFire,\n      botFinishFire: botFinishFire,\n      topShipLoc: topShipLoc,\n      botShipLoc: botShipLoc,\n      topShipHit: topShipHit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TopShip, {\n      currDirection: topDirection,\n      changeTopShipLoc: changeTopShipLoc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TopMissile, {\n      topMissileFire: topMissileFire,\n      topFinishFire: topFinishFire,\n      topShipLoc: topShipLoc,\n      botShipLoc: botShipLoc,\n      botShipHit: botShipHit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GameBoard, \"b4lpMYziFRLC88bSq/CPBHvnoXQ=\", false, function () {\n  return [useKey, useKey, useKey, useKey, useKey, useKey];\n});\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/GameBoard.js"],"names":["React","useEffect","useState","TopShip","BottomShip","useKey","TopMissile","BotMissile","Socket","GameBoard","props","rightPressed","leftPressed","firePressed","pPressed","iPressed","oPressed","topDirection","setTopDirection","topMissileFire","setTopMissileFire","topShipLoc","setTopShipLoc","topLives","setTopLives","bottomDirection","setBottomDirection","botMissileFire","setBotMissileFire","botShipLoc","setBotShipLoc","botLives","setBotLives","checkPressTop","checkPressBot","updateLives","topFinishFire","changeTopShipLoc","currTopShipLoc","topShipHit","prevTopLives","botShipHit","prevBotLives","botFinishFire","topNum","botNum","changeBotShipLoc","currBotShipLoc"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport TopShip from './TopShip'\r\nimport BottomShip from './BottomShip'\r\nimport useKey from './UseKey'\r\nimport TopMissile from './TopMissile'\r\nimport BotMissile from './BotMissile'\r\n\r\nimport './Game.css';\r\nimport { Socket } from 'socket.io-client'\r\n\r\nfunction GameBoard(props){\r\n\r\n    // returns true if the user is pressing a key (left arrow, right arrow, \"f\", etc.)\r\n    const rightPressed = useKey(\"ArrowRight\");\r\n    const leftPressed = useKey(\"ArrowLeft\");\r\n    const firePressed = useKey(\"f\");\r\n\r\n    // this can be changed, but the bottom ship is mapped to different keys than the top ship for now so they can both be operated with 1 keyboard\r\n    const pPressed = useKey(\"p\");\r\n    const iPressed = useKey(\"i\");\r\n    const oPressed = useKey(\"o\");\r\n\r\n    // state changes for the top ship/missile\r\n    const [topDirection, setTopDirection] = useState('RIGHT'); \r\n    const [topMissileFire, setTopMissileFire] = useState(false);\r\n    const [topShipLoc, setTopShipLoc] = useState([0,0]);\r\n    const [topLives, setTopLives] = useState(3);\r\n\r\n    // state changes for the bottom ship/missile\r\n    const [bottomDirection, setBottomDirection] = useState('LEFT'); \r\n    const [botMissileFire, setBotMissileFire] = useState(false);\r\n    const [botShipLoc, setBotShipLoc] = useState([0,0]);\r\n    const [botLives, setBotLives] = useState(3);\r\n\r\n    // when the user presses a key, checks the key they pressed and performs actions\r\n    useEffect(() => {\r\n        checkPressTop();\r\n        checkPressBot();\r\n        updateLives();\r\n    },[rightPressed, leftPressed, firePressed, pPressed, iPressed, oPressed,topLives,botLives]);\r\n\r\n    // initiates triggers for firing or movement\r\n    const checkPressTop = () => {\r\n        if (rightPressed){\r\n            setTopDirection('RIGHT');\r\n        }\r\n        else if(leftPressed){\r\n            setTopDirection('LEFT');\r\n        }\r\n        if (firePressed){\r\n            setTopMissileFire(true);\r\n        }\r\n    }\r\n\r\n    \r\n     // sets the top missile fire to false and ends the trigger\r\n     const topFinishFire = () => {\r\n        setTopMissileFire(false);\r\n    }\r\n\r\n    // gets the location of the top ship's head for missile positioning\r\n    const changeTopShipLoc = (currTopShipLoc) => {\r\n        setTopShipLoc(currTopShipLoc);\r\n    }\r\n\r\n    \r\n    const topShipHit = () => {\r\n        setTopLives(prevTopLives => prevTopLives - 1);\r\n    }\r\n\r\n    const botShipHit = () => {\r\n        setBotLives(prevBotLives => prevBotLives - 1);\r\n    }\r\n\r\n    // initiates triggers for firing or movement\r\n    const checkPressBot = () => {\r\n        if (pPressed){\r\n            setBottomDirection('RIGHT');\r\n        }\r\n        else if(iPressed){\r\n            setBottomDirection('LEFT');\r\n        }\r\n        if (oPressed){\r\n            setBotMissileFire(true);\r\n        }\r\n    }\r\n\r\n    // sets the bottom missile fire to false and ends the trigger\r\n    const botFinishFire = () => {\r\n        setBotMissileFire(false);\r\n    }\r\n\r\n    const updateLives = (topNum, botNum) =>{\r\n        props.updateLives(topLives, botLives);\r\n    }\r\n\r\n    // gets the location of the bottom ship's head for missile positioning\r\n    const changeBotShipLoc = (currBotShipLoc) => {\r\n        setBotShipLoc(currBotShipLoc);\r\n    }\r\n\r\n    // returns the game area to the calling component\r\n    return(\r\n        <div className = \"game-area\">\r\n                <BottomShip currDirection={bottomDirection} changeBotShipLoc={changeBotShipLoc}/>\r\n               \r\n                <BotMissile botMissileFire={botMissileFire} botFinishFire={botFinishFire} \r\n                            topShipLoc={topShipLoc} botShipLoc={botShipLoc}\r\n                            topShipHit={topShipHit}/>\r\n\r\n                <TopShip currDirection={topDirection} changeTopShipLoc={changeTopShipLoc}/>\r\n\r\n                <TopMissile topMissileFire={topMissileFire} topFinishFire={topFinishFire} \r\n                            topShipLoc={topShipLoc} botShipLoc={botShipLoc}\r\n                            botShipHit={botShipHit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard;\r\n"]},"metadata":{},"sourceType":"module"}