{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\BotMissile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useEffect } from 'react'; // React Hook for the missile for the bottom ship\n\nfunction BotMissile(props) {\n  _s();\n\n  const missileSpeed = 50;\n  const [missileOpacity, setMissileOpacity] = useState(0);\n  const [mLocation, setMLocation] = useState([50, 20]);\n  const [moving, setMoving] = useState(false);\n  const [missileHitSuccess, setMissileHitSuccess] = useState(false); // continues to check to see if the user has pressed any keys\n\n  useEffect(() => {\n    if (!moving) {\n      checkFire();\n    } // on an interval (defined by missile speed) calls the function to move the missile\n    // and terminate the firing process\n\n\n    const interval = setInterval(() => {\n      moveMissile();\n      checkEndFire();\n    }, missileSpeed);\n    return () => clearInterval(interval);\n  }); // checks to see if the trigger for the missile has been activated\n\n  const checkFire = () => {\n    // if user has selected the \"f\" key\n    if (props.botMissileFire === true) {\n      // sets the missile's status to \"moving\"\n      setMoving(true); // makes the missile visible\n\n      setMissileOpacity(1); // calls the function to fire missile\n\n      fireMissile();\n    }\n  }; // calls the parent to set botMissileFire to false \n\n\n  const botFinishFire = () => {\n    props.botFinishFire();\n  };\n\n  const topShipHit = () => {\n    props.topShipHit();\n  }; // in a sequence of functions activated when user hits the \"f\" key\n\n\n  const fireMissile = () => {\n    // sets the parent variable that trigger the fire to false\n    botFinishFire(); // sets initialLoc to the coordinates of the ship's head\n\n    let initialLoc = [props.botShipLoc[10][0], props.botShipLoc[10][1] + 2]; // sets the missile location to the current head of the ship\n\n    setMLocation(initialLoc);\n  };\n\n  const checkHit = oppShipLoc => {\n    if (oppShipLoc[0] == mLocation[0] && oppShipLoc[1] == mLocation[1]) {\n      setMissileHitSuccess(true);\n    }\n  }; // checks the condition for ending fire\n\n\n  const checkEndFire = () => {\n    // if the missile has reached the end of the gameboard\n    if (mLocation[1] < 4) {\n      // set missile invisible, set moving to false\n      setMissileOpacity(0);\n      setMLocation([0, 0]);\n      setMoving(false);\n    }\n\n    props.topShipLoc.map(checkHit);\n\n    if (missileHitSuccess) {\n      setMissileOpacity(0);\n      setMLocation([0, 0]);\n      setMoving(false);\n      topShipHit();\n      setMissileHitSuccess(false);\n    }\n  }; // changes the position of the missile if \"moving\" is true\n\n\n  const moveMissile = () => {\n    if (moving) {\n      let location = { ...mLocation\n      };\n      location = [location[0], location[1] - 2];\n      setMLocation(location);\n    }\n  }; // returns the missile component to the component that calls it\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mLocation.map((dot, i) => {\n      const style = {\n        opacity: `${missileOpacity}`,\n        left: `${mLocation[0]}%`,\n        top: `${mLocation[1]}%`\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"missile\",\n        style: style\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BotMissile, \"JaaMkEe2lty4tHiignhsSKy/mHU=\");\n\n_c = BotMissile;\nexport default BotMissile;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotMissile\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/BotMissile.js"],"names":["React","useState","useEffect","BotMissile","props","missileSpeed","missileOpacity","setMissileOpacity","mLocation","setMLocation","moving","setMoving","missileHitSuccess","setMissileHitSuccess","checkFire","interval","setInterval","moveMissile","checkEndFire","clearInterval","botMissileFire","fireMissile","botFinishFire","topShipHit","initialLoc","botShipLoc","checkHit","oppShipLoc","topShipLoc","map","location","dot","i","style","opacity","left","top"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CAGA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAEtB,QAAMC,YAAY,GAAG,EAArB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAC,EAAD,EAAI,EAAJ,CAAD,CAA1C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,KAAD,CAA1D,CANsB,CAQtB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACQ,MAAL,EACA;AACII,MAAAA,SAAS;AACZ,KAJW,CAMZ;AACA;;;AACA,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BC,MAAAA,WAAW;AACXC,MAAAA,YAAY;AACf,KAH2B,EAGzBb,YAHyB,CAA5B;AAIA,WAAO,MAAMc,aAAa,CAACJ,QAAD,CAA1B;AAEH,GAdQ,CAAT,CATsB,CAyBtB;;AACA,QAAMD,SAAS,GAAG,MAAM;AACpB;AACA,QAAIV,KAAK,CAACgB,cAAN,KAAyB,IAA7B,EAAkC;AAE9B;AACAT,MAAAA,SAAS,CAAC,IAAD,CAAT,CAH8B,CAK9B;;AACAJ,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,CAN8B,CAQ9B;;AACAc,MAAAA,WAAW;AACd;AACJ,GAbD,CA1BsB,CAyCtB;;;AACA,QAAMC,aAAa,GAAG,MAAM;AACxBlB,IAAAA,KAAK,CAACkB,aAAN;AACH,GAFD;;AAKA,QAAMC,UAAU,GAAG,MAAM;AACrBnB,IAAAA,KAAK,CAACmB,UAAN;AACH,GAFD,CA/CsB,CAmDtB;;;AACA,QAAMF,WAAW,GAAG,MAAM;AAEtB;AACAC,IAAAA,aAAa,GAHS,CAKtB;;AACA,QAAIE,UAAU,GAAG,CAACpB,KAAK,CAACqB,UAAN,CAAiB,EAAjB,EAAqB,CAArB,CAAD,EAA0BrB,KAAK,CAACqB,UAAN,CAAiB,EAAjB,EAAqB,CAArB,IAA0B,CAApD,CAAjB,CANsB,CAQtB;;AACAhB,IAAAA,YAAY,CAACe,UAAD,CAAZ;AACH,GAVD;;AAYA,QAAME,QAAQ,GAAIC,UAAD,IAAgB;AAC7B,QAAIA,UAAU,CAAC,CAAD,CAAV,IAAiBnB,SAAS,CAAC,CAAD,CAA1B,IAAiCmB,UAAU,CAAC,CAAD,CAAV,IAAiBnB,SAAS,CAAC,CAAD,CAA/D,EAAmE;AAC/DK,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH;AACJ,GAJD,CAhEsB,CAsEtB;;;AACA,QAAMK,YAAY,GAAG,MAAM;AAEvB;AACA,QAAIV,SAAS,CAAC,CAAD,CAAT,GAAe,CAAnB,EAAqB;AACjB;AACAD,MAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAE,MAAAA,YAAY,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAAZ;AACAE,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;;AAEDP,IAAAA,KAAK,CAACwB,UAAN,CAAiBC,GAAjB,CAAqBH,QAArB;;AAEA,QAAId,iBAAJ,EAAsB;AAClBL,MAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAE,MAAAA,YAAY,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAAZ;AACAE,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAY,MAAAA,UAAU;AACVV,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH;AAEJ,GApBD,CAvEsB,CA6FtB;;;AACA,QAAMI,WAAW,GAAG,MAAM;AACtB,QAAIP,MAAJ,EAAW;AACP,UAAIoB,QAAQ,GAAG,EAAC,GAAGtB;AAAJ,OAAf;AACAsB,MAAAA,QAAQ,GAAG,CAACA,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAR,GAAY,CAA1B,CAAX;AACArB,MAAAA,YAAY,CAACqB,QAAD,CAAZ;AACH;AACJ,GAND,CA9FsB,CAsGtB;;;AACA,sBACI;AAAA,cACKtB,SAAS,CAACqB,GAAV,CAAc,CAACE,GAAD,EAAMC,CAAN,KAAU;AAAC,YAAMC,KAAK,GAAG;AACxCC,QAAAA,OAAO,EAAG,GAAE5B,cAAe,EADa;AAExC6B,QAAAA,IAAI,EAAG,GAAE3B,SAAS,CAAC,CAAD,CAAI,GAFkB;AAGxC4B,QAAAA,GAAG,EAAG,GAAE5B,SAAS,CAAC,CAAD,CAAI;AAHmB,OAAd;AAK9B,0BAAQ;AAAK,QAAA,SAAS,EAAC,SAAf;AAAiC,QAAA,KAAK,EAAEyB;AAAxC,SAA8BD,CAA9B;AAAA;AAAA;AAAA;AAAA,cAAR;AACC,KANI;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAlHQ7B,U;;KAAAA,U;AAoHT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\n\r\n\r\n// React Hook for the missile for the bottom ship\r\nfunction BotMissile(props){\r\n\r\n    const missileSpeed = 50;\r\n    const [missileOpacity, setMissileOpacity] = useState(0);\r\n    const [mLocation, setMLocation] = useState([50,20]);\r\n    const [moving, setMoving] = useState(false);\r\n    const [missileHitSuccess, setMissileHitSuccess] = useState(false);\r\n\r\n    // continues to check to see if the user has pressed any keys\r\n    useEffect(() => {\r\n        if (!moving)\r\n        {\r\n            checkFire();\r\n        }\r\n\r\n        // on an interval (defined by missile speed) calls the function to move the missile\r\n        // and terminate the firing process\r\n        const interval = setInterval(() => {\r\n            moveMissile();\r\n            checkEndFire();\r\n        }, missileSpeed);\r\n        return () => clearInterval(interval);\r\n\r\n    },);\r\n\r\n    // checks to see if the trigger for the missile has been activated\r\n    const checkFire = () => {\r\n        // if user has selected the \"f\" key\r\n        if (props.botMissileFire === true){\r\n\r\n            // sets the missile's status to \"moving\"\r\n            setMoving(true);\r\n\r\n            // makes the missile visible\r\n            setMissileOpacity(1);\r\n\r\n            // calls the function to fire missile\r\n            fireMissile();\r\n        }\r\n    }\r\n\r\n    // calls the parent to set botMissileFire to false \r\n    const botFinishFire = () => {\r\n        props.botFinishFire();\r\n    }\r\n\r\n    \r\n    const topShipHit = () => {\r\n        props.topShipHit();\r\n    }\r\n\r\n    // in a sequence of functions activated when user hits the \"f\" key\r\n    const fireMissile = () => {\r\n\r\n        // sets the parent variable that trigger the fire to false\r\n        botFinishFire(); \r\n\r\n        // sets initialLoc to the coordinates of the ship's head\r\n        let initialLoc = [props.botShipLoc[10][0], props.botShipLoc[10][1] + 2]\r\n\r\n        // sets the missile location to the current head of the ship\r\n        setMLocation(initialLoc);\r\n    }\r\n\r\n    const checkHit = (oppShipLoc) => {\r\n        if (oppShipLoc[0] == mLocation[0] && oppShipLoc[1] == mLocation[1]){\r\n            setMissileHitSuccess(true)\r\n        }\r\n    }\r\n\r\n    // checks the condition for ending fire\r\n    const checkEndFire = () => {\r\n        \r\n        // if the missile has reached the end of the gameboard\r\n        if (mLocation[1] < 4){\r\n            // set missile invisible, set moving to false\r\n            setMissileOpacity(0);\r\n            setMLocation([0,0]);\r\n            setMoving(false);\r\n        }\r\n\r\n        props.topShipLoc.map(checkHit)\r\n\r\n        if (missileHitSuccess){\r\n            setMissileOpacity(0);\r\n            setMLocation([0,0]);\r\n            setMoving(false);\r\n            topShipHit();\r\n            setMissileHitSuccess(false);\r\n        }\r\n\r\n    }\r\n\r\n    // changes the position of the missile if \"moving\" is true\r\n    const moveMissile = () => {\r\n        if (moving){\r\n            let location = {...mLocation}\r\n            location = [location[0], location[1]-2]\r\n            setMLocation(location);\r\n        }\r\n    }\r\n\r\n    // returns the missile component to the component that calls it\r\n    return(\r\n        <div>\r\n            {mLocation.map((dot, i)=>{const style = {\r\n            opacity: `${missileOpacity}`,\r\n            left: `${mLocation[0]}%`,\r\n            top: `${mLocation[1]}%`\r\n        }\r\n        return (<div className=\"missile\" key={i} style={style}></div>)\r\n        })}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BotMissile"]},"metadata":{},"sourceType":"module"}