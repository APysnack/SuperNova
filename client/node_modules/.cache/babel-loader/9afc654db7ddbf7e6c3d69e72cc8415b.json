{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\purle\\\\Desktop\\\\pied-piper-supernova\\\\client\\\\src\\\\components\\\\Game\\\\BottomShip.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport './Game.css'; // bottom ship component\n\nfunction BottomShip(props) {\n  _s();\n\n  // controls the movement speed of the ship\n  const speed = 150; // the initial build of the ship (positioned at the bottom right)\n\n  const shipBuild = [[90, 96], [98, 96], [90, 94], [92, 94], [94, 94], [96, 94], [98, 94], [92, 92], [94, 92], [96, 92], [94, 90]]; // bottom left build of the ship coordinates\n\n  const shipBuildLeft = [[0, 96], [8, 96], [0, 94], [2, 94], [4, 94], [6, 94], [8, 94], [2, 92], [4, 92], [6, 92], [4, 90]]; // Bottom ship states\n\n  const [shipLoc, setShipLoc] = useState(shipBuild);\n  const [shipDirection, setDirection] = useState(props.currDirection);\n  const [active, setActive] = useState(true);\n  const [stuckLocation, setStuckLoc] = useState('INIT'); // listens for user input and changes the direction according to user's input\n\n  useEffect(() => {\n    setNewDirection(); // moves ship at a speed as defined above\n\n    const interval = setInterval(() => {\n      moveShip();\n    }, speed);\n    return () => clearInterval(interval);\n  }, [shipLoc, active]); // checks to ensure the ship is within the game area\n\n  const checkBounds = () => {\n    if (shipLoc[0][0] <= 6) {\n      setActive(false);\n      setStuckLoc('LEFT');\n      setDirection('STUCKLEFT');\n    } else if (shipLoc[1][0] >= 92) {\n      setActive(false);\n      setStuckLoc('RIGHT');\n      setDirection('STUCKRIGHT');\n    } else {\n      setActive(true);\n      setStuckLoc('INIT');\n    }\n  }; // tracks the current location of the ships head and passes to the parent\n\n\n  const changeBotShipLoc = currBotHeadLoc => {\n    props.changeBotShipLoc(currBotHeadLoc);\n  }; // changes the direction of the ship \n\n\n  const setNewDirection = () => {\n    if (active) {\n      setDirection(props.currDirection);\n    } else if (props.currDirection !== stuckLocation) {\n      setActive(true);\n    }\n  }; // changes the coordinates of the ship to the right\n\n\n  const shiftRight = ([x, y]) => {\n    return [x + 2, y];\n  }; // changes the coordinates of the ship to the left\n\n\n  const shiftLeft = ([x, y]) => {\n    return [x - 2, y];\n  }; // moves the ship to the left or right depending on input\n\n\n  const moveShip = () => {\n    let location;\n\n    switch (shipDirection) {\n      case 'RIGHT':\n        location = shipLoc.map(shiftRight);\n        break;\n\n      case 'LEFT':\n        location = shipLoc.map(shiftLeft);\n        break;\n\n      case 'STUCKLEFT':\n        location = shipBuildLeft;\n        break;\n\n      case 'STUCKRIGHT':\n        location = shipBuild;\n        break;\n    }\n\n    setShipLoc(location);\n    changeBotShipLoc(shipLoc);\n    checkBounds();\n  }; // returns the ship build to the calling component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: shipLoc.map((dot, i) => {\n      const style = {\n        left: `${dot[0]}%`,\n        top: `${dot[1]}%`\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pixel\",\n        style: style\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BottomShip, \"ujWRpxJklYmegohOhPsKhWKz1dI=\");\n\n_c = BottomShip;\nexport default BottomShip;\n\nvar _c;\n\n$RefreshReg$(_c, \"BottomShip\");","map":{"version":3,"sources":["C:/Users/purle/Desktop/pied-piper-supernova/client/src/components/Game/BottomShip.js"],"names":["React","useState","useEffect","BottomShip","props","speed","shipBuild","shipBuildLeft","shipLoc","setShipLoc","shipDirection","setDirection","currDirection","active","setActive","stuckLocation","setStuckLoc","setNewDirection","interval","setInterval","moveShip","clearInterval","checkBounds","changeBotShipLoc","currBotHeadLoc","shiftRight","x","y","shiftLeft","location","map","dot","i","style","left","top"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nimport './Game.css';\r\n\r\n// bottom ship component\r\nfunction BottomShip(props){\r\n\r\n    // controls the movement speed of the ship\r\n    const speed = 150;\r\n\r\n    // the initial build of the ship (positioned at the bottom right)\r\n    const shipBuild = [\r\n    [90,96], [98,96],\r\n    [90,94], [92,94], [94,94],\r\n    [96,94], [98,94], [92,92], [94,92], [96,92], [94,90]]\r\n    \r\n    // bottom left build of the ship coordinates\r\n    const shipBuildLeft = [ [0,96], [8,96],\r\n    [0,94], [2,94], [4,94], [6,94], [8,94],\r\n    [2,92], [4,92], [6,92],\r\n    [4,90]]\r\n\r\n    // Bottom ship states\r\n    const [shipLoc, setShipLoc] = useState(shipBuild);\r\n    const [shipDirection, setDirection] = useState(props.currDirection);\r\n    const [active, setActive] = useState(true);\r\n    const [stuckLocation, setStuckLoc] = useState('INIT');\r\n\r\n    // listens for user input and changes the direction according to user's input\r\n    useEffect(() => {\r\n        setNewDirection();\r\n\r\n        // moves ship at a speed as defined above\r\n        const interval = setInterval(() => {\r\n            moveShip();\r\n        }, speed);\r\n        return () => clearInterval(interval);\r\n\r\n    },[shipLoc, active]);\r\n\r\n    // checks to ensure the ship is within the game area\r\n    const checkBounds = () => {\r\n        if (shipLoc[0][0] <= 6) {\r\n            setActive(false);    \r\n            setStuckLoc('LEFT');\r\n            setDirection('STUCKLEFT');\r\n        }\r\n        else if(shipLoc[1][0] >= 92){\r\n            setActive(false);    \r\n            setStuckLoc('RIGHT');\r\n            setDirection('STUCKRIGHT');\r\n        }\r\n        else{\r\n            setActive(true);\r\n            setStuckLoc('INIT');\r\n        }\r\n    }\r\n\r\n    // tracks the current location of the ships head and passes to the parent\r\n    const changeBotShipLoc = (currBotHeadLoc) => {\r\n        props.changeBotShipLoc(currBotHeadLoc);\r\n    }\r\n\r\n    // changes the direction of the ship \r\n    const setNewDirection = () => {\r\n        if (active) {\r\n            setDirection(props.currDirection);\r\n        }\r\n        else if (props.currDirection !== stuckLocation){\r\n            setActive(true);\r\n        }\r\n    }\r\n\r\n    // changes the coordinates of the ship to the right\r\n    const shiftRight = ([x,y]) => {\r\n        return([x+2, y]);\r\n    }\r\n\r\n    // changes the coordinates of the ship to the left\r\n    const shiftLeft = ([x,y]) => {\r\n        return([x-2, y]);\r\n    }\r\n\r\n    // moves the ship to the left or right depending on input\r\n    const moveShip = () => {\r\n        let location;\r\n\r\n        switch (shipDirection){\r\n            case 'RIGHT':\r\n                location = shipLoc.map(shiftRight)\r\n                break;\r\n            case 'LEFT':\r\n                location = shipLoc.map(shiftLeft)\r\n                break;\r\n            case 'STUCKLEFT':\r\n                location = shipBuildLeft;\r\n                break;\r\n            case 'STUCKRIGHT':\r\n                location = shipBuild;\r\n                break;\r\n        }\r\n\r\n        setShipLoc(location);\r\n        changeBotShipLoc(shipLoc);\r\n        checkBounds();\r\n    }\r\n\r\n    // returns the ship build to the calling component\r\n    return(\r\n    <div>\r\n        {shipLoc.map((dot, i)=>{\r\n            const style = {\r\n                left: `${dot[0]}%`,\r\n                top: `${dot[1]}%`\r\n            }\r\n\r\n            return(\r\n                <div className=\"pixel\" key={i} style={style}></div>\r\n            )\r\n        })}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default BottomShip;"]},"metadata":{},"sourceType":"module"}